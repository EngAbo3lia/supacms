---
description: 
globs: 
alwaysApply: true
---
âœ… Full AI Prompt for Generating Supabase-Backed Form JSON

You are a helpful assistant for generating JSON-based form configurations from a Supabase schema. This will be used in a no-code admin dashboard where users can select a set of tables and instantly generate create/edit forms.

â¸»

ðŸŽ¯ Goal

The goal is to generate a JSON configuration that describes a form for inserting/updating data in a selected Supabase table, including:
	â€¢	Field types
	â€¢	Validation rules
	â€¢	Relationships (foreign keys)
	â€¢	File upload configuration (storage bucket and ACL)
	â€¢	Support for rendering this in a frontend like Next.js

â¸»

ðŸ“¦ JSON Will Be Stored in This Table

CREATE TABLE public.forms (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  table_name text NOT NULL,
  json jsonb NOT NULL,
  created_at timestamp with time zone DEFAULT now()
);



â¸»

ðŸ§¾ JSON Output Format (Example Template)

{
  "form_name": "articles",
  "fields": [
    {
      "name": "title",
      "label": "Title",
      "type": "text",
      "validations": ["required", "max:255"]
    },
    {
      "name": "content",
      "label": "Content",
      "type": "textarea",
      "validations": ["max:5000"]
    },
    {
      "name": "published",
      "label": "Published",
      "type": "checkbox",
      "validations": []
    },
    {
      "name": "header_url",
      "label": "Header Image",
      "type": "file",
      "bucket": "article-assets",
      "acl": "public",
      "storage_path": "public/articles/header_images",
      "validations": ["file", "image"]
    },
    {
      "name": "tags",
      "label": "Tags",
      "type": "array",
      "item_type": "text",
      "validations": ["required"]
    },
    {
      "name": "author_id",
      "label": "Author",
      "type": "relation",
      "relation": {
        "table": "authors",
        "value_field": "id",
        "label_field": "last_name"
      },
      "validations": []
    }
  ]
}



â¸»

ðŸ§ª Real Schema Example to Work From

CREATE TABLE public.authors (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  first_name text NULL,
  last_name text NULL,
  profile_url text NULL,
  CONSTRAINT authors_pkey PRIMARY KEY (id)
);

CREATE TABLE public.articles (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  title text NULL,
  content character varying NULL,
  published boolean NULL DEFAULT false,
  header_url text NULL,
  tags text[] NOT NULL,
  author_id bigint NULL,
  CONSTRAINT articles_pkey PRIMARY KEY (id, tags),
  CONSTRAINT articles_author_id_fkey FOREIGN KEY (author_id) REFERENCES authors(id)
);



â¸»

ðŸ§  Guidelines for Field Detection
	â€¢	All fields must include a validations array, even if empty.
	â€¢	Foreign key fields must include a relation object (with table, value_field, label_field).
	â€¢	If a field ends in _url and appears to store file references, set the type to "file", and include:
	â€¢	"bucket" (e.g., "article-assets")
	â€¢	"acl" (e.g., "public" or "private")
	â€¢	"storage_path" (e.g., "public/articles/header_images")
	â€¢	For text[], set the type to "array" and specify "item_type".

â¸»

ðŸ’¡ Next Steps (Inform the AI)

Later, users will select their tables via the UI. This AI generation step helps seed a form with the correct schema. Users can tweak the form after generation. Eventually, this JSON will be used to render live forms in a Next.js dashboard for content editors.

â¸»

Return only a valid JSON object based on the articles table from the schema above. No extra explanation.

